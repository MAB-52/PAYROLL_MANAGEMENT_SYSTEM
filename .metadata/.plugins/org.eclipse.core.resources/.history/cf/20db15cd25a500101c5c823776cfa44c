package com.project.controllers;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project.dto.OrganizationApprovalRequest;
import com.project.entity.Organization;
import com.project.entity.VerificationStatus;
import com.project.service.OrganizationService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/organizations")
@RequiredArgsConstructor
public class OrganizationController {

    private final OrganizationService organizationService;

    @PutMapping("/{orgId}/verify")
    public ResponseEntity<Organization> verifyOrganization(
            @PathVariable Long orgId,
            @RequestBody OrganizationApprovalRequest request
    ) {
        Organization verified;
        
        if (request.getStatus() == VerificationStatus.APPROVED) {
            verified = organizationService.verifyOrganization(orgId, request.getAdminId(), VerificationStatus.APPROVED);
        } else {
            verified = organizationService.verifyOrganization(orgId, request.getAdminId(), VerificationStatus.REJECTED);
        }

        return ResponseEntity.ok(verified);
    }


    @PostMapping
    public ResponseEntity<Organization> createOrganization(@RequestBody Organization organization) {
        return ResponseEntity.ok(organizationService.createOrganization(organization));
    }

    @GetMapping("/{id}")
    public ResponseEntity<Organization> getOrganization(@PathVariable Long id) {
        return ResponseEntity.ok(organizationService.getOrganizationById(id));
    }

    @GetMapping
    public ResponseEntity<List<Organization>> getAllOrganizations() {
        return ResponseEntity.ok(organizationService.getAllOrganizations());
    }

    @PutMapping("/{id}")
    public ResponseEntity<Organization> updateOrganization(@PathVariable Long id, @RequestBody Organization updatedOrg) {
        return ResponseEntity.ok(organizationService.updateOrganization(id, updatedOrg));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteOrganization(@PathVariable Long id) {
        organizationService.deleteOrganization(id);
        return ResponseEntity.noContent().build();
    }
}
