package com.project.mapper;

import com.project.dto.*;
import com.project.entity.*;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class EntityMapper {

    // ===============================
    // Employee Mapping
    // ===============================

    public EmployeeDTO toEmployeeDTO(Employee employee) {
        if (employee == null) return null;

        return EmployeeDTO.builder()
                .id(employee.getId())
                .fullName(employee.getFullName())
                .email(employee.getEmail())
                .salary(employee.getSalaryStructure())
                .designation(employee.getDesignation())
                .organizationId(employee.getOrganization() != null ? employee.getOrganization().getId() : null)
                .build();
    }

    public Employee toEmployeeEntity(EmployeeDTO dto, Organization organization) {
        if (dto == null) return null;

        return Employee.builder()
                .id(dto.getId())
                .fullName(dto.getFullName())
                .email(dto.getEmail())
                .salary(dto.getSalaryStructure())
                .designation(dto.getDesignation())
                .organization(organization)
                .build();
    }

    public List<EmployeeDTO> toEmployeeDTOList(List<Employee> employees) {
        if (employees == null) return null;
        return employees.stream().map(this::toEmployeeDTO).collect(Collectors.toList());
    }

    public List<Employee> toEmployeeEntityList(List<EmployeeDTO> dtos, Organization organization) {
        if (dtos == null) return null;
        return dtos.stream().map(dto -> toEmployeeEntity(dto, organization)).collect(Collectors.toList());
    }

    // ===============================
    // Organization Mapping
    // ===============================

    public OrganizationDTO toOrganizationDTO(Organization org) {
        if (org == null) return null;

        return OrganizationDTO.builder()
                .id(org.getId())
                .orgName(org.getOrgName())
                .address(org.getAddress())
                .contactEmail(org.getContactEmail())
                .build();
    }

    public Organization toOrganizationEntity(OrganizationDTO dto) {
        if (dto == null) return null;

        return Organization.builder()
                .id(dto.getId())
                .orgName(dto.getOrganizationName())
                .address(dto.getAddress())
                .contactEmail(dto.getEmail())
                .build();
    }

    public List<OrganizationDTO> toOrganizationDTOList(List<Organization> organizations) {
        if (organizations == null) return null;
        return organizations.stream().map(this::toOrganizationDTO).collect(Collectors.toList());
    }

    public List<Organization> toOrganizationEntityList(List<OrganizationDTO> dtos) {
        if (dtos == null) return null;
        return dtos.stream().map(this::toOrganizationEntity).collect(Collectors.toList());
    }

    // ===============================
    // BankAdmin Mapping
    // ===============================

    public BankAdminDTO toBankAdminDTO(BankAdmin admin) {
        if (admin == null) return null;

        return BankAdminDTO.builder()
                .id(admin.getId())
                .name(admin.getName())
                .email(admin.getEmail())
                .role(admin.getRole())
                .build();
    }

    public BankAdmin toBankAdminEntity(BankAdminDTO dto) {
        if (dto == null) return null;

        return BankAdmin.builder()
                .id(dto.getId())
                .name(dto.getName())
                .email(dto.getEmail())
                .role(dto.getRole())
                .build();
    }

    public List<BankAdminDTO> toBankAdminDTOList(List<BankAdmin> admins) {
        if (admins == null) return null;
        return admins.stream().map(this::toBankAdminDTO).collect(Collectors.toList());
    }

    public List<BankAdmin> toBankAdminEntityList(List<BankAdminDTO> dtos) {
        if (dtos == null) return null;
        return dtos.stream().map(this::toBankAdminEntity).collect(Collectors.toList());
    }

    // ===============================
    // SalaryPayment Mapping
    // ===============================

    public SalaryPaymentDTO toSalaryPaymentDTO(SalaryPayment payment) {
        if (payment == null) return null;

        return SalaryPaymentDTO.builder()
                .id(payment.getId())
                .amount(payment.getAmount())
                .paymentDate(payment.getPaymentDate())
                .salaryMonth(payment.getSalaryMonth())
                .status(payment.getStatus())
                .employeeId(payment.getEmployee() != null ? payment.getEmployee().getId() : null)
                .organizationId(payment.getOrganization() != null ? payment.getOrganization().getId() : null)
                .verifiedByAdminId(payment.getVerifiedBy() != null ? payment.getVerifiedBy().getId() : null)
                .build();
    }

    public SalaryPayment toSalaryPaymentEntity(SalaryPaymentDTO dto, Employee employee, Organization organization, BankAdmin verifiedBy) {
        if (dto == null) return null;

        return SalaryPayment.builder()
                .id(dto.getId())
                .amount(dto.getAmount())
                .paymentDate(dto.getPaymentDate())
                .salaryMonth(dto.getSalaryMonth())
                .status(dto.getStatus())
                .employee(employee)
                .organization(organization)
                .verifiedBy(verifiedBy)
                .build();
    }

    public List<SalaryPaymentDTO> toSalaryPaymentDTOList(List<SalaryPayment> payments) {
        if (payments == null) return null;
        return payments.stream().map(this::toSalaryPaymentDTO).collect(Collectors.toList());
    }

    public List<SalaryPayment> toSalaryPaymentEntityList(List<SalaryPaymentDTO> dtos,
                                                         Employee employee,
                                                         Organization organization,
                                                         BankAdmin verifiedBy) {
        if (dtos == null) return null;
        return dtos.stream()
                .map(dto -> toSalaryPaymentEntity(dto, employee, organization, verifiedBy))
                .collect(Collectors.toList());
    }
}
