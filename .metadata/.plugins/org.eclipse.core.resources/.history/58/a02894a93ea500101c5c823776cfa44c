package com.project.mapper;

import com.project.dto.*;
import com.project.entity.*;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class EntityMapper {
	
	// ===============================
    // SalaryStructure Mapping
    // ===============================
    public SalaryStructureDTO toSalaryStructureDTO(SalaryStructure structure) {
        if (structure == null) return null;

        return SalaryStructureDTO.builder()
                .id(structure.getId())
                .basic(structure.getBasic())
                .hra(structure.getHra())
                .da(structure.getDa())
                .pf(structure.getPf())
                .allowances(structure.getAllowances())
                .netSalary(structure.getNetSalary())
                .build();
    }

    public SalaryStructure toSalaryStructureEntity(SalaryStructureDTO dto) {
        if (dto == null) return null;

        return SalaryStructure.builder()
                .id(dto.getId())
                .basic(dto.getBasic())
                .hra(dto.getHra())
                .da(dto.getDa())
                .pf(dto.getPf())
                .allowances(dto.getAllowances())
                .netSalary(dto.getNetSalary())
                .build();
    }

    // ===============================
    // Employee Mapping
    // ===============================
    public EmployeeDTO toEmployeeDTO(Employee employee) {
        if (employee == null) return null;

        return EmployeeDTO.builder()
                .id(employee.getId())
                .fullName(employee.getFullName())
                .email(employee.getEmail())
                .department(employee.getDepartment())
                .designation(employee.getDesignation())
                .accountNumber(employee.getAccountNumber())
                .ifscCode(employee.getIfscCode())
                .bankName(employee.getBankName())
                .documentUrl(employee.getDocumentUrl())
                .verificationStatus(employee.getVerificationStatus() != null ? employee.getVerificationStatus().name() : null)
                .organizationId(employee.getOrganization() != null ? employee.getOrganization().getId() : null)
                .salaryStructure(toSalaryStructureDTO(employee.getSalaryStructure()))
                .salaryPaymentIds(employee.getSalaryPayments() != null
                        ? employee.getSalaryPayments().stream().map(SalaryPayment::getId).collect(Collectors.toList())
                        : null)
                .concernIds(employee.getConcerns() != null
                        ? employee.getConcerns().stream().map(Concern::getId).collect(Collectors.toList())
                        : null)
                .build();
    }

    public Employee toEmployeeEntity(EmployeeDTO dto, Organization organization) {
        if (dto == null) return null;

        return Employee.builder()
                .id(dto.getId())
                .fullName(dto.getFullName())
                .email(dto.getEmail())
                .department(dto.getDepartment())
                .designation(dto.getDesignation())
                .accountNumber(dto.getAccountNumber())
                .ifscCode(dto.getIfscCode())
                .bankName(dto.getBankName())
                .documentUrl(dto.getDocumentUrl())
                .verificationStatus(dto.getVerificationStatus() != null
                        ? VerificationStatus.valueOf(dto.getVerificationStatus())
                        : null)
                .salaryStructure(toSalaryStructureEntity(dto.getSalaryStructure()))
                .organization(organization)
                .password(dto.getPassword())   // ✅ ADD THIS LINE
                .build();
    }


    public List<EmployeeDTO> toEmployeeDTOList(List<Employee> employees) {
        return employees == null ? null :
                employees.stream().map(this::toEmployeeDTO).collect(Collectors.toList());
    }

    
 // ===============================
 // Organization Mapping
 // ===============================
 public OrganizationDTO toOrganizationDTO(Organization org) {
     if (org == null) return null;

     return OrganizationDTO.builder()
             .id(org.getId())
             .organizationName(org.getOrgName())
             .registrationNumber(org.getRegistrationNumber()) // ✅ Added
             .email(org.getContactEmail())
             .contactNumber(org.getContactPhone()) // ✅ Added
             .address(org.getAddress())
             .documentUrl(org.getDocumentUrl())
             .verificationStatus(org.getVerificationStatus() != null ? org.getVerificationStatus().name() : null)
             .bankId(org.getBank() != null ? org.getBank().getId() : null)
             .employeeIds(org.getEmployees() != null
                     ? org.getEmployees().stream().map(Employee::getId).collect(Collectors.toList())
                     : null)
             .paymentRequestIds(org.getPaymentRequests() != null
                     ? org.getPaymentRequests().stream().map(PaymentRequest::getId).collect(Collectors.toList())
                     : null)
             .build();
 }

 public Organization toOrganizationEntity(OrganizationDTO dto, Bank bank) {
     if (dto == null) return null;

     return Organization.builder()
             .id(dto.getId())
             .orgName(dto.getOrganizationName())
             .registrationNumber(dto.getRegistrationNumber()) // ✅ Added
             .contactEmail(dto.getEmail())
             .contactPhone(dto.getContactNumber()) // ✅ Added
             .address(dto.getAddress())
             .documentUrl(dto.getDocumentUrl())
             .verificationStatus(dto.getVerificationStatus() != null ? VerificationStatus.valueOf(dto.getVerificationStatus()) : null)
             .bank(bank)
             .build();
 }


    // ===============================
    // BankAdmin Mapping
    // ===============================
    public BankAdminDTO toBankAdminDTO(BankAdmin admin) {
        if (admin == null) return null;

        return BankAdminDTO.builder()
                .id(admin.getId())
                .name(admin.getName())
                .email(admin.getEmail())
                .contactNumber(admin.getContactNumber())
                .bankId(admin.getBank() != null ? admin.getBank().getId() : null)
                .build();
    }

    public BankAdmin toBankAdminEntity(BankAdminDTO dto, Bank bank) {
        if (dto == null) return null;

        return BankAdmin.builder()
                .id(dto.getId())
                .name(dto.getName())
                .email(dto.getEmail())
                .contactNumber(dto.getContactNumber())
                .bank(bank)
                .build();
    }

    // ===============================
    // SalaryPayment Mapping
    // ===============================
    public SalaryPaymentDTO toSalaryPaymentDTO(SalaryPayment payment) {
        if (payment == null) return null;

        return SalaryPaymentDTO.builder()
                .id(payment.getId())
                .amount(payment.getAmount())
                .paymentDate(payment.getPaymentDate())
                .salaryMonth(payment.getSalaryMonth())
                .status(payment.getStatus() != null ? payment.getStatus().name() : null)
                .employeeId(payment.getEmployee() != null ? payment.getEmployee().getId() : null)
                .organizationId(payment.getOrganization() != null ? payment.getOrganization().getId() : null)
                .verifiedByAdminId(payment.getVerifiedBy() != null ? payment.getVerifiedBy().getId() : null)
                .build();
    }

    public SalaryPayment toSalaryPaymentEntity(SalaryPaymentDTO dto, Employee employee, Organization organization, BankAdmin verifiedBy) {
        if (dto == null) return null;

        return SalaryPayment.builder()
                .id(dto.getId())
                .amount(dto.getAmount())
                .paymentDate(dto.getPaymentDate())
                .salaryMonth(dto.getSalaryMonth())
                .status(dto.getStatus() != null ? SalaryStatus.valueOf(dto.getStatus()) : null)
                .employee(employee)
                .organization(organization)
                .verifiedBy(verifiedBy)
                .build();
    }
    
 // Convert SalaryStructureDTO → SalaryStructure entity
    public SalaryStructure toSalaryEntity(SalaryStructureDTO dto) {
        if (dto == null) {
            return null;
        }

        return SalaryStructure.builder()
                .id(dto.getId())
                .basic(dto.getBasic())
                .hra(dto.getHra())
                .da(dto.getDa())
                .pf(dto.getPf())
                .allowances(dto.getAllowances())
                .netSalary(dto.getNetSalary())
                .build();
    }

    // Convert SalaryStructure entity → SalaryStructureDTO
    public SalaryStructureDTO toSalaryDTO(SalaryStructure entity) {
        if (entity == null) {
            return null;
        }

        return SalaryStructureDTO.builder()
                .id(entity.getId())
                .basic(entity.getBasic())
                .hra(entity.getHra())
                .da(entity.getDa())
                .pf(entity.getPf())
                .allowances(entity.getAllowances())
                .netSalary(entity.getNetSalary())
                .build();
    }

}
